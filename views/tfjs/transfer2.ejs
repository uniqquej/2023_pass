<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>
  </head>

<body>
<header>
    <%- include('../header') %>
</header>
<main>
    <div class="container">
        <video id="video" width="640" height="480" autoplay playsinline muted style="position:absolute; top:0; left:0;"></video>
        <!-- 그리기 영역 정의, 비디오 영역에 겹쳐서 그림 -->
        <canvas id="canvas" width="640" height="480" style="position:absolute; top:0; left:0;"></canvas>
    </div>
</main>
</body>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest"> </script>
    
<script>

    const labels = ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light',
               'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
               'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee',
               'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard',
               'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
               'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch',
               'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
               'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear',
               'hair drier', 'toothbrush'];

    const video = document.getElementById('video');
    const canvas = document.getElementById("canvas");
    const context = canvas.getContext("2d");

    let webcam, model;

    const WIDTH = canvas.width;
    const HEIGHT = canvas.height;

    async function app() {
        webcam = await navigator.mediaDevices.getUserMedia({ video: true, audio: false })
        video.srcObject = webcam;
        model = await tf.loadGraphModel('https://raw.githubusercontent.com/oralcoder/2023_nodejs/main/transfer/model.json');
       
        loop();
    }
    async function loop() {
        const image = tf.tidy(() => { //tf.tidy: 정리하다 > 이미지를 tensor 형태로 바꾼 값의 사용이 끝나면 메모리 해제
            return tf.image.resizeBilinear(tf.browser.fromPixels(video), [640, 640])
              .div(255.0).expandDims(0); // (1,640,640)
        });
        const predictions = await model.executeAsync(image);

        context.clearRect(0, 0, WIDTH, HEIGHT); // 그려진 사각형 정리
        context.drawImage(video, 0, 0);

        const [boxes, scores, classes, valid_detections] = predictions; //valid_detections > 유효한 detect 결과값
        const boxes_data = boxes.dataSync();
        const scores_data = scores.dataSync();
        const classes_data = classes.dataSync();
        const valid_detections_data = valid_detections.dataSync()[0];

        //Tensor를 메모리에서 해제
        tf.dispose(predictions)
        
        for (let i=0; i<valid_detections_data; ++i) {
            let [x1, y1, x2, y2] = boxes_data.slice(i * 4, (i + 1) * 4);

            //x,y값은 비율이기때문에 넓이,높이 곱해줌
            x1 *= WIDTH;
            x2 *= WIDTH;
            y1 *= HEIGHT;
            y2 *= HEIGHT;
            x1 = parseInt(x1); // 정수값으로 변경
            x2 = parseInt(x2);
            y1 = parseInt(y1);
            y2 = parseInt(y2);
            
            const width = x2 - x1;
            const height = y2 - y1;
            const klass = classes_data[i];
            const score = scores_data[i].toFixed(2);
            
            //console.log(x1,y1,width,height, klass, score);

            context.beginPath();
            
            context.lineWidth = 2;
            context.strokeStyle = "#00ff00";
            context.strokeRect(x1, y1, width, height);   
            
            
            context.fillStyle = "#00ff00";
            context.fillRect(x1, y1-20, width, 20);
            
            context.font = "25px Arial";
            context.fillStyle = "#ffffff";
            context.fillText(`${labels[klass]} :  ${parseFloat(score).toFixed(2)}`, x1, y1);
        }
       
        requestAnimationFrame(loop);
    }
    
    app();
</script>
</body>
</html>